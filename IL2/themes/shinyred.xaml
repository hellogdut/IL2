<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <Color x:Key="BlackColor">#FF000000</Color>
  <Color x:Key="WhiteColor">#FFFFFFFF</Color>
  <SolidColorBrush x:Key="TextBrush" Color="#FFFFFFFF" />
  <Color x:Key="NormalBrushGradient1">#FFF1BCBE</Color>
  <Color x:Key="NormalBrushGradient2">#FFCE6865</Color>
  <Color x:Key="NormalBrushGradient3">#FFAF231E</Color>
  <Color x:Key="NormalBrushGradient4">#FF601818</Color>
  <Color x:Key="NormalBorderBrushGradient1">#FFBBBBBB</Color>
  <Color x:Key="NormalBorderBrushGradient2">#FF737373</Color>
  <Color x:Key="NormalBorderBrushGradient3">#FF646464</Color>
  <Color x:Key="NormalBorderBrushGradient4">#FF000000</Color>
  <Color x:Key="SelectedBackgroundGradient1">#FFBBBBBB</Color>
  <Color x:Key="SelectedBackgroundGradient2">#FF737373</Color>
  <Color x:Key="SelectedBackgroundGradient3">#FF646464</Color>
  <Color x:Key="SelectedBackgroundGradient4">#FFA1A1A1</Color>
  <Color x:Key="SliderBorderGradient1">#FF3F3F3F</Color>
  <Color x:Key="SliderBorderGradient2">#FFADADAD</Color>
  <Color x:Key="ShadeBrushGradient1">#FF62676A</Color>
  <Color x:Key="ShadeBrushGradient2">#FFD1D4D6</Color>
  <Color x:Key="ShadeBrushGradient3">#FFFFFFFF</Color>
  <Color x:Key="WindowBackgroundBrushGradient1">#FFD1D1D1</Color>
  <Color x:Key="WindowBackgroundBrushGradient2">#FF8496AA</Color>
  <LinearGradientBrush x:Key="NormalBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="{StaticResource NormalBrushGradient1}" Offset="0" />
    <GradientStop Color="{StaticResource NormalBrushGradient2}" Offset="0.41800001263618469" />
    <GradientStop Color="{StaticResource NormalBrushGradient3}" Offset="0.418" />
    <GradientStop Color="{StaticResource NormalBrushGradient4}" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="NormalBorderBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="{StaticResource NormalBorderBrushGradient1}" />
    <GradientStop Color="{StaticResource NormalBorderBrushGradient2}" Offset="0.38" />
    <GradientStop Color="{StaticResource NormalBorderBrushGradient3}" Offset="0.384" />
    <GradientStop Color="{StaticResource NormalBorderBrushGradient4}" Offset="1" />
  </LinearGradientBrush>
  <RadialGradientBrush x:Key="HoverBrush">
    <RadialGradientBrush.RelativeTransform>
      <TransformGroup>
        <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.804" ScaleY="0.743" />
        <SkewTransform CenterX="0.5" CenterY="0.5" />
        <RotateTransform CenterX="0.5" CenterY="0.5" />
        <TranslateTransform Y="0.47999998927116394" />
      </TransformGroup>
    </RadialGradientBrush.RelativeTransform>
    <GradientStop Color="#FFFFC398" Offset="0.209" />
    <GradientStop Color="#00FFB598" Offset="1" />
    <GradientStop Color="#FFFFFFFF" Offset="0" />
  </RadialGradientBrush>
  <LinearGradientBrush x:Key="CheckIconBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FF006CD1" />
    <GradientStop Color="#FFA5D6F9" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ShadeBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="{StaticResource ShadeBrushGradient2}" Offset="0" />
    <GradientStop Color="{StaticResource ShadeBrushGradient3}" Offset="0.1" />
    <GradientStop Color="{StaticResource ShadeBrushGradient3}" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ShadeBrushTop" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="{StaticResource ShadeBrushGradient2}" Offset="0" />
    <GradientStop Color="{StaticResource ShadeBrushGradient3}" Offset="0.1" />
    <GradientStop Color="{StaticResource ShadeBrushGradient3}" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ShadeBrushBottom" EndPoint="0.5,0" StartPoint="0.5,1">
    <GradientStop Color="{StaticResource ShadeBrushGradient2}" />
    <GradientStop Color="{StaticResource ShadeBrushGradient3}" Offset="0.1" />
    <GradientStop Color="{StaticResource ShadeBrushGradient3}" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ShadeBrushLeft" EndPoint="1,0.5" StartPoint="0,0.5">
    <GradientStop Color="{StaticResource ShadeBrushGradient2}" />
    <GradientStop Color="{StaticResource ShadeBrushGradient3}" Offset="0.1" />
    <GradientStop Color="{StaticResource ShadeBrushGradient3}" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ShadeBrushRight" EndPoint="0,0.5" StartPoint="1,0.5">
    <GradientStop Color="{StaticResource ShadeBrushGradient2}" />
    <GradientStop Color="{StaticResource ShadeBrushGradient3}" Offset="0.1" />
    <GradientStop Color="{StaticResource ShadeBrushGradient3}" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="DisabledBackgroundBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="#FFFFFFFF" />
    <GradientStop Color="#FF62676A" Offset="1" />
    <GradientStop Color="#FFD1D4D6" Offset="0.41800001263618469" />
    <GradientStop Color="#FFA9AFB5" Offset="0.425" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="SelectedBackgroundBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="{StaticResource SelectedBackgroundGradient1}" />
    <GradientStop Color="{StaticResource SelectedBackgroundGradient2}" Offset="0.38" />
    <GradientStop Color="{StaticResource SelectedBackgroundGradient3}" Offset="0.384" />
    <GradientStop Color="{StaticResource SelectedBackgroundGradient4}" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="SelectedBackgroundBrushVertical" EndPoint="2.05,0.5" StartPoint="-0.55,0.5">
    <GradientStop Color="{StaticResource SelectedBackgroundGradient1}" />
    <GradientStop Color="{StaticResource SelectedBackgroundGradient2}" Offset="0.37999999523162842" />
    <GradientStop Color="{StaticResource SelectedBackgroundGradient3}" Offset="0.38400000333786011" />
    <GradientStop Color="{StaticResource SelectedBackgroundGradient4}" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="HorizontalSliderBorderBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="{StaticResource SliderBorderGradient1}" />
    <GradientStop Color="{StaticResource SliderBorderGradient2}" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="VerticalSliderBorderBrush" EndPoint="1.35,0.5" StartPoint="0.6,0.5">
    <GradientStop Color="{StaticResource SliderBorderGradient1}" />
    <GradientStop Color="{StaticResource SliderBorderGradient2}" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="WindowBackgroundBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="{StaticResource WindowBackgroundBrushGradient1}" />
    <GradientStop Color="{StaticResource WindowBackgroundBrushGradient2}" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="MouseOverBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#FFF" Offset="0.0" />
    <GradientStop Color="#AAA" Offset="1.0" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="PressedBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#BBB" Offset="0.0" />
    <GradientStop Color="#EEE" Offset="0.1" />
    <GradientStop Color="#EEE" Offset="0.9" />
    <GradientStop Color="#FFF" Offset="1.0" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="PressedBorderBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#444" Offset="0.0" />
    <GradientStop Color="#888" Offset="1.0" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="LightBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#FFF" Offset="0.0" />
    <GradientStop Color="#EEE" Offset="1.0" />
  </LinearGradientBrush>
  <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#FF636363" />
  <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />
  <LinearGradientBrush x:Key="DefaultedBorderBrush" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#777" Offset="0.0" />
    <GradientStop Color="#000" Offset="1.0" />
  </LinearGradientBrush>
  <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />
  <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA" />
  <SolidColorBrush x:Key="LightColorBrush" Color="#DDD" />
  <SolidColorBrush x:Key="GlyphBrush" Color="{StaticResource WhiteColor}" />
  <Style x:Key="NuclearButtonFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border>
            <Rectangle Margin="2" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type Button}" TargetType="{x:Type Button}" BasedOn="{x:Null}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource NuclearButtonFocusVisual}" />
    <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="Control.Template" Value="{DynamicResource ButtonTemplate}" />
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}" />
  </Style>
  <ControlTemplate x:Key="ButtonTemplate" TargetType="{x:Type Button}">
    <ControlTemplate.Resources>
      <Storyboard x:Key="HoverOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="HoverOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="PressedOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Background" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.6" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="PressedOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Background" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="FocusedOn">
        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Visibility)">
          <DiscreteObjectKeyFrame KeyTime="00:00:00.1000000" Value="{x:Static Visibility.Visible}" />
        </ObjectAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="FocusedOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
    </ControlTemplate.Resources>
    <Grid Name="Grid">
      <Border Name="Background" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="2,2,2,2" CornerRadius="2,2,2,2">
        <Border Name="Hover" Background="{StaticResource HoverBrush}" CornerRadius="1,1,1,1" Height="Auto" Width="Auto" Opacity="0" />
      </Border>
      <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" />
      <Border Name="FocusVisualElement" IsHitTestVisible="False" BorderBrush="{StaticResource HoverBrush}" BorderThickness="2,2,2,2" CornerRadius="2,2,2,2" Opacity="0" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="Button.IsDefault" Value="True">
        <Setter TargetName="Background" Value="{DynamicResource DefaultedBorderBrush}" Property="Border.BorderBrush" />
      </Trigger>
      <Trigger Property="UIElement.IsKeyboardFocused" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource FocusedOn}" />
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard Name="FocusedOff_BeginStoryboard" Storyboard="{StaticResource FocusedOff}" />
        </Trigger.ExitActions>
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource HoverOff}" />
        </Trigger.ExitActions>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource PressedOn}" />
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource PressedOff}" />
        </Trigger.ExitActions>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="True" />
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Background" Property="Border.Background" />
        <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Background" Property="Border.BorderBrush" />
        <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="RadioButtonFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border>
            <Rectangle Margin="15,0,0,0" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CheckBoxFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border>
            <Rectangle Margin="15,0,0,0" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}" />
    <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="Control.Template" Value="{DynamicResource CheckBoxTemplate}" />
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}" />
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="Control.Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="CheckBoxTemplate" TargetType="{x:Type CheckBox}">
    <ControlTemplate.Resources>
      <Storyboard x:Key="CheckedFalse">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="CheckedTrue">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="ThreeStateOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="ThreeStateOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="HoverOn">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="HoverOff">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="PressedOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Background" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.6" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="PressedOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Background" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
    </ControlTemplate.Resources>
    <BulletDecorator Background="#00FFFFFF">
      <BulletDecorator.Bullet>
        <Grid Width="16" Height="16">
          <Rectangle Name="Background" Height="14" Margin="1" Width="14" Fill="{TemplateBinding Control.Background}" Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="2" RadiusX="1" RadiusY="1" />
          <Rectangle Name="BackgroundOverlay" Height="12" Width="12" Opacity="0" Fill="{StaticResource HoverBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Stroke="{x:Null}" />
          <Path Name="CheckIcon" Opacity="0" Stretch="Fill" Data="M102.03442,598.79645L105.22962,597.78918 106.95686,599.19977C106.95686,599.19977 113.77958,590.53656 113.77958,590.53656 113.77958,590.53656 107.40649,603.79431 107.40649,603.79431z" Fill="#FFFFFFFF" Height="10" Width="11" Stroke="{StaticResource CheckIconBrush}" StrokeThickness="0" />
          <Rectangle Name="IndeterminateIcon" Height="9" Width="9" Opacity="0" Fill="#FFFFFFFF" Stroke="{StaticResource CheckIconBrush}" RadiusX="1" RadiusY="1" />
          <Rectangle Name="DisabledVisualElement" Height="14" Width="14" Opacity="0" Fill="{StaticResource DisabledBackgroundBrush}" RadiusX="1" RadiusY="1" />
          <Rectangle Name="ContentFocusVisualElement" Height="16" Width="16" IsHitTestVisible="False" Opacity="0" Stroke="{StaticResource HoverBrush}" StrokeThickness="1" RadiusX="2" RadiusY="2" />
        </Grid>
      </BulletDecorator.Bullet>
      <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" />
    </BulletDecorator>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ToggleButton.IsChecked" Value="True" />
          <Condition Property="ToggleButton.IsThreeState" Value="True" />
        </MultiTrigger.Conditions>
        <MultiTrigger.EnterActions>
          <BeginStoryboard Name="ThreeStateOn_BeginStoryboard" Storyboard="{StaticResource CheckedFalse}" />
        </MultiTrigger.EnterActions>
        <MultiTrigger.ExitActions>
          <BeginStoryboard Name="ThreeStateOff_BeginStoryboard" Storyboard="{StaticResource CheckedTrue}" />
        </MultiTrigger.ExitActions>
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Value="{x:Null}" Property="ToggleButton.IsChecked" />
          <Condition Property="ToggleButton.IsThreeState" Value="True" />
        </MultiTrigger.Conditions>
        <MultiTrigger.EnterActions>
          <BeginStoryboard Name="ThreeStateOn1_BeginStoryboard" Storyboard="{StaticResource ThreeStateOn}" />
        </MultiTrigger.EnterActions>
        <MultiTrigger.ExitActions>
          <BeginStoryboard Name="ThreeStateOff1_BeginStoryboard" Storyboard="{StaticResource ThreeStateOff}" />
        </MultiTrigger.ExitActions>
        <Setter TargetName="CheckIcon" Property="UIElement.Visibility" Value="Hidden" />
      </MultiTrigger>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <Trigger.ExitActions>
          <BeginStoryboard Name="CheckedTrue_BeginStoryboard" Storyboard="{StaticResource CheckedFalse}" />
        </Trigger.ExitActions>
        <Trigger.EnterActions>
          <BeginStoryboard Name="CheckedTrue_BeginStoryboard1" Storyboard="{StaticResource CheckedTrue}" />
        </Trigger.EnterActions>
      </Trigger>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource HoverOff}" />
        </Trigger.ExitActions>
      </Trigger>
      <Trigger Property="ButtonBase.IsPressed" Value="True">
        <Trigger.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource PressedOn}" />
        </Trigger.EnterActions>
        <Trigger.ExitActions>
          <BeginStoryboard Storyboard="{StaticResource PressedOff}" />
        </Trigger.ExitActions>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter TargetName="Background" Value="{DynamicResource DisabledBackgroundBrush}" Property="Shape.Fill" />
        <Setter TargetName="Background" Value="{DynamicResource DisabledBorderBrush}" Property="Shape.Stroke" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}" />
    <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="CheckedFalse">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="CheckedTrue">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckIcon" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundOverlay" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Background" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.6" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Background" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <BulletDecorator Background="#00FFFFFF">
            <BulletDecorator.Bullet>
              <Grid Width="16" Height="16">
                <Ellipse Name="Background" Height="14" Margin="1" Width="14" Fill="{StaticResource NormalBrush}" Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="2" />
                <Ellipse Name="BackgroundOverlay" Height="12" Width="12" Opacity="0" Fill="{StaticResource HoverBrush}" Stroke="#00000000" Margin="2,2,2,2" StrokeThickness="0" />
                <Border Name="CheckIcon" HorizontalAlignment="Center" VerticalAlignment="Center" Width="6" Height="6" CornerRadius="1,1,1,1" BorderThickness="1,1,1,1" Background="#FFFFFFFF" BorderBrush="{StaticResource CheckIconBrush}" Opacity="0" />
              </Grid>
            </BulletDecorator.Bullet>
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" />
          </BulletDecorator>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="false">
              <Trigger.ExitActions>
                <BeginStoryboard Name="CheckedTrue_BeginStoryboard" Storyboard="{StaticResource CheckedTrue}" />
              </Trigger.ExitActions>
              <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource CheckedFalse}" />
              </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOff}" />
              </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource PressedOn}" />
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource PressedOff}" />
              </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="Background" Value="{DynamicResource DisabledBackgroundBrush}" Property="Shape.Fill" />
              <Setter TargetName="Background" Value="{DynamicResource DisabledBorderBrush}" Property="Shape.Stroke" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="Control.Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="NuclearRepeatButton" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
    <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Border" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.6" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Border" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Grid>
            <Border Name="Border" Background="{TemplateBinding Control.Background}" CornerRadius="2,2,2,2" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="2" />
            <Rectangle Name="BackgroundAnimation" Opacity="0" Fill="{StaticResource HoverBrush}" StrokeThickness="0" RadiusX="1" RadiusY="1" Margin="2,2,2,2" Stroke="{x:Null}" />
            <ContentPresenter Name="ContentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding ContentControl.Content}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="True">
              <Setter Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOff}" />
              </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource PressedOn}" />
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource PressedOff}" />
              </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background" />
              <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush" />
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NuclearThumbStyle" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundMouseOver" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundMouseOver" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Background" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.6" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Background" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Grid Name="Grid" Margin="0,0,0,0">
            <Rectangle Name="Background" Fill="{StaticResource NormalBrush}" StrokeThickness="2" RadiusX="2" RadiusY="2" Stroke="{StaticResource NormalBorderBrush}" />
            <Rectangle Name="BackgroundMouseOver" Fill="{StaticResource HoverBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1" Margin="2,2,2,2" Opacity="0" Stroke="{x:Null}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsFocused" Value="True" />
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOff}" />
              </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="Thumb.IsDragging" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource PressedOn}" />
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource PressedOff}" />
              </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Background" Property="Shape.Fill" />
              <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Background" Property="Shape.Stroke" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NuclearScrollRepeatButtonStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="Control.Background" Value="#00FFFFFF" />
    <Setter Property="Control.BorderBrush" Value="#00FFFFFF" />
    <Setter Property="Control.IsTabStop" Value="False" />
    <Setter Property="UIElement.Focusable" Value="False" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Grid>
            <Rectangle Fill="{TemplateBinding Control.Background}" Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="{TemplateBinding Control.BorderThickness}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollBar}">
          <Grid Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
            <Grid.RowDefinitions>
              <RowDefinition MaxHeight="18" />
              <RowDefinition Height="0.00001*" />
              <RowDefinition MaxHeight="18" />
            </Grid.RowDefinitions>
            <Border Grid.RowSpan="3" Background="#FFDDDEDF" CornerRadius="3,3,3,3" />
            <RepeatButton Name="DecreaseRepeat" Style="{DynamicResource NuclearRepeatButton}" Command="ScrollBar.LineUpCommand">
              <Grid>
                <Path Name="DecreaseArrow" StrokeThickness="1" Data="M0,4L8,4 4,0z" Fill="{DynamicResource GlyphBrush}" />
              </Grid>
            </RepeatButton>
            <Track Name="PART_Track" Grid.Row="1" Orientation="Vertical" IsDirectionReversed="True">
              <Track.Thumb>
                <Thumb Style="{DynamicResource NuclearThumbStyle}" />
              </Track.Thumb>
              <Track.IncreaseRepeatButton>
                <RepeatButton Name="PageUp" Style="{DynamicResource NuclearScrollRepeatButtonStyle}" Command="ScrollBar.PageDownCommand" />
              </Track.IncreaseRepeatButton>
              <Track.DecreaseRepeatButton>
                <RepeatButton Name="PageDown" Style="{DynamicResource NuclearScrollRepeatButtonStyle}" Command="ScrollBar.PageUpCommand" />
              </Track.DecreaseRepeatButton>
            </Track>
            <RepeatButton Name="IncreaseRepeat" Grid.Row="2" Style="{DynamicResource NuclearRepeatButton}" Command="ScrollBar.LineDownCommand">
              <Grid>
                <Path Name="IncreaseArrow" StrokeThickness="1" Data="M0,0L4,4 8,0z" Fill="{DynamicResource GlyphBrush}" />
              </Grid>
            </RepeatButton>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ScrollBar.Orientation" Value="Horizontal">
              <Setter TargetName="GridRoot" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90" />
                </Setter.Value>
              </Setter>
              <Setter TargetName="PART_Track" Property="Track.Orientation" Value="Vertical" />
              <Setter TargetName="DecreaseRepeat" Property="ButtonBase.Command" Value="ScrollBar.LineLeftCommand" />
              <Setter TargetName="IncreaseRepeat" Property="ButtonBase.Command" Value="ScrollBar.LineRightCommand" />
              <Setter TargetName="PageDown" Property="ButtonBase.Command" Value="ScrollBar.PageLeftCommand" />
              <Setter TargetName="PageUp" Property="ButtonBase.Command" Value="ScrollBar.PageRightCommand" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Background" Value="#FFDDDEDF" />
  </Style>
  <Style x:Key="{x:Type ScrollViewer}" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid Background="{TemplateBinding Control.Background}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Control.Padding}" Content="{TemplateBinding ContentControl.Content}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" />
            <ScrollBar Name="PART_HorizontalScrollBar" Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" Orientation="Horizontal" ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" AutomationProperties.AutomationId="HorizontalScrollBar" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <ScrollBar Name="PART_VerticalScrollBar" Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" Orientation="Vertical" ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" AutomationProperties.AutomationId="VerticalScrollBar" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type ListBox}" TargetType="{x:Type ListBox}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="Control.Background" Value="{DynamicResource ShadeBrush}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBox}">
          <Grid>
            <Border Name="Border" CornerRadius="2" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" />
            <ScrollViewer Focusable="False" Margin="0,0,0,1">
              <StackPanel Margin="2" IsItemsHost="True" />
            </ScrollViewer>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background" />
              <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="ItemsControl.IsGrouping" Value="True">
              <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type ListBoxItem}" TargetType="{x:Type ListBoxItem}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Grid Name="grid" Background="{TemplateBinding Control.Background}" Margin="1,1,1,1" SnapsToDevicePixels="True">
            <Rectangle Name="Background" IsHitTestVisible="False" Fill="{StaticResource SelectedBackgroundBrush}" RadiusX="0" />
            <Rectangle Name="SelectedRectangle" IsHitTestVisible="False" Opacity="0" Fill="{StaticResource NormalBrush}" RadiusX="0" />
            <Rectangle Name="HoverRectangle" IsHitTestVisible="False" Fill="{StaticResource HoverBrush}" RadiusX="0" Opacity="0" />
            <ContentPresenter Name="contentPresenter" Margin="5,3,3,3" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOff}" />
              </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="ListBoxItem.IsSelected" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource SelectedOn}" />
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource SelectedOff}" />
              </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}" />
  </Style>
  <Style x:Key="ExpanderHeaderFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Border>
            <Rectangle SnapsToDevicePixels="True" Margin="0" Stroke="#FF000000" StrokeDashArray="1 2" StrokeThickness="1" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.6" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Border Name="border" Padding="{TemplateBinding Control.Padding}" Background="#FFFFFFFF" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2">
            <Grid SnapsToDevicePixels="False" Background="#00FFFFFF">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="21" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Rectangle Name="Rectangle" Margin="3,3,3,3" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="2" RadiusY="2" />
              <Rectangle Name="HoverRectangle" Margin="3,3,3,3" Fill="{DynamicResource HoverBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="2" RadiusY="2" Opacity="0" />
              <Path Name="Up_Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M0,0L4,4 8,0z" />
              <Path Name="Down_Arrow" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M0,4L4,0 8,4z" />
              <ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="Left" Margin="4,3,0,3" VerticalAlignment="Center" Grid.Column="1" RecognizesAccessKey="True" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="Rectangle" Value="{DynamicResource DisabledBackgroundBrush}" Property="Shape.Fill" />
              <Setter TargetName="border" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="Down_Arrow" Property="UIElement.Visibility" Value="Visible" />
              <Setter TargetName="Up_Arrow" Property="UIElement.Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Trigger.ExitActions>
                <BeginStoryboard Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
              </Trigger.ExitActions>
              <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
              </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Trigger.ExitActions>
                <BeginStoryboard Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}" />
              </Trigger.ExitActions>
              <Trigger.EnterActions>
                <BeginStoryboard Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}" />
              </Trigger.EnterActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.6" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Border Name="border" Padding="{TemplateBinding Control.Padding}" Background="#FFFFFFFF" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2">
            <Grid SnapsToDevicePixels="False" Background="#00FFFFFF">
              <Grid.RowDefinitions>
                <RowDefinition Height="21" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Grid>
                <Grid.LayoutTransform>
                  <TransformGroup>
                    <TransformGroup.Children>
                      <TransformCollection>
                        <RotateTransform Angle="-90" />
                      </TransformCollection>
                    </TransformGroup.Children>
                  </TransformGroup>
                </Grid.LayoutTransform>
                <Rectangle Name="Rectangle" Margin="3,3,1,3" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="2" RadiusY="2" />
                <Rectangle Name="HoverRectangle" Margin="3,3,1,3" Fill="{DynamicResource HoverBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="2" RadiusY="2" Opacity="0" />
                <Path Name="Up_Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M0,0L4,4 8,0z" />
                <Path Name="Down_Arrow" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M0,4L4,0 8,4z" />
              </Grid>
              <ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="Center" Margin="2,4,4,0" VerticalAlignment="Top" Grid.Row="1" RecognizesAccessKey="True">
                <ContentPresenter.LayoutTransform>
                  <TransformGroup>
                    <TransformGroup.Children>
                      <TransformCollection>
                        <RotateTransform Angle="-90" />
                      </TransformCollection>
                    </TransformGroup.Children>
                  </TransformGroup>
                </ContentPresenter.LayoutTransform>
              </ContentPresenter>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="Rectangle" Value="{DynamicResource DisabledBackgroundBrush}" Property="Shape.Fill" />
              <Setter TargetName="border" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="Up_Arrow" Property="UIElement.Visibility" Value="Collapsed" />
              <Setter TargetName="Down_Arrow" Property="UIElement.Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Trigger.ExitActions>
                <BeginStoryboard Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
              </Trigger.ExitActions>
              <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
              </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Trigger.ExitActions>
                <BeginStoryboard Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}" />
              </Trigger.ExitActions>
              <Trigger.EnterActions>
                <BeginStoryboard Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}" />
              </Trigger.EnterActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.6" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Border Name="border" Padding="{TemplateBinding Control.Padding}" CornerRadius="2,2,2,2" BorderThickness="1,1,1,1" Background="#FFFFFFFF" BorderBrush="{DynamicResource NormalBorderBrush}">
            <Grid SnapsToDevicePixels="False" Background="#00FFFFFF">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="21" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Grid>
                <Grid.LayoutTransform>
                  <TransformGroup>
                    <TransformGroup.Children>
                      <TransformCollection>
                        <RotateTransform Angle="180" />
                      </TransformCollection>
                    </TransformGroup.Children>
                  </TransformGroup>
                </Grid.LayoutTransform>
                <Rectangle Name="Rectangle" Margin="3,3,3,3" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="2" RadiusY="2" />
                <Rectangle Name="HoverRectangle" Margin="3,3,3,3" Fill="{DynamicResource HoverBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="2" RadiusY="2" Opacity="0" />
                <Path Name="Up_Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M0,0L4,4 8,0z" />
                <Path Name="Down_Arrow" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M0,4L4,0 8,4z" />
              </Grid>
              <ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="Left" Margin="4,3,0,3" VerticalAlignment="Center" Grid.Column="1" RecognizesAccessKey="True" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="border" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush" />
              <Setter TargetName="Rectangle" Value="{DynamicResource DisabledBackgroundBrush}" Property="Shape.Fill" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="Up_Arrow" Property="UIElement.Visibility" Value="Collapsed" />
              <Setter TargetName="Down_Arrow" Property="UIElement.Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Trigger.ExitActions>
                <BeginStoryboard Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
              </Trigger.ExitActions>
              <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
              </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Trigger.ExitActions>
                <BeginStoryboard Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}" />
              </Trigger.ExitActions>
              <Trigger.EnterActions>
                <BeginStoryboard Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}" />
              </Trigger.EnterActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.6" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Border Name="border" Padding="{TemplateBinding Control.Padding}" CornerRadius="2,2,2,2" Background="#FFFFFFFF" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1">
            <Grid SnapsToDevicePixels="False" Background="#00FFFFFF">
              <Grid.RowDefinitions>
                <RowDefinition Height="21" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <Grid>
                <Grid.LayoutTransform>
                  <TransformGroup>
                    <TransformGroup.Children>
                      <TransformCollection>
                        <RotateTransform Angle="90" />
                      </TransformCollection>
                    </TransformGroup.Children>
                  </TransformGroup>
                </Grid.LayoutTransform>
                <Rectangle Name="Rectangle" Margin="3,3,3,3" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="2" RadiusY="2" />
                <Rectangle Name="HoverRectangle" Margin="3,3,3,3" Fill="{DynamicResource HoverBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="1" RadiusX="2" RadiusY="2" Opacity="0" />
                <Path Name="Up_Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M0,0L4,4 8,0z" />
                <Path Name="Down_Arrow" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M0,4L4,0 8,4z" />
              </Grid>
              <ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="Center" Margin="4,4,2,0" VerticalAlignment="Top" Grid.Row="1" RecognizesAccessKey="True">
                <ContentPresenter.LayoutTransform>
                  <TransformGroup>
                    <TransformGroup.Children>
                      <TransformCollection>
                        <RotateTransform Angle="90" />
                      </TransformCollection>
                    </TransformGroup.Children>
                  </TransformGroup>
                </ContentPresenter.LayoutTransform>
              </ContentPresenter>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="Rectangle" Value="{DynamicResource DisabledBackgroundBrush}" Property="Shape.Fill" />
              <Setter TargetName="border" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="Up_Arrow" Property="UIElement.Visibility" Value="Collapsed" />
              <Setter TargetName="Down_Arrow" Property="UIElement.Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Trigger.ExitActions>
                <BeginStoryboard Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
              </Trigger.ExitActions>
              <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
              </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Trigger.ExitActions>
                <BeginStoryboard Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}" />
              </Trigger.ExitActions>
              <Trigger.EnterActions>
                <BeginStoryboard Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}" />
              </Trigger.EnterActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type Expander}" TargetType="{x:Type Expander}">
    <Setter Property="Control.Background" Value="#00FFFFFF" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Control.VerticalContentAlignment" Value="Stretch" />
    <Setter Property="Control.BorderBrush" Value="#00FFFFFF" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Expander}">
          <Border SnapsToDevicePixels="True" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="1,1,1,1" CornerRadius="3">
            <DockPanel>
              <ToggleButton Name="HeaderSite" FontFamily="{TemplateBinding Control.FontFamily}" FontSize="{TemplateBinding Control.FontSize}" FontStretch="{TemplateBinding Control.FontStretch}" FontStyle="{TemplateBinding Control.FontStyle}" FontWeight="{TemplateBinding Control.FontWeight}" Foreground="{TemplateBinding Control.Foreground}" HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Padding="{TemplateBinding Control.Padding}" VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" Margin="1,1,1,0" MinHeight="0" MinWidth="0" Style="{StaticResource ExpanderDownHeaderStyle}" Content="{TemplateBinding HeaderedContentControl.Header}" ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderedContentControl.HeaderTemplateSelector}" DockPanel.Dock="Top" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
              <Grid Name="grid" Visibility="Collapsed">
                <Border Name="border" Background="{DynamicResource ShadeBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,0,1,1" CornerRadius="3,3,3,3" Margin="0,0,0,0" />
                <ContentPresenter Name="ExpandSite" Focusable="False" HorizontalAlignment="Left" Margin="1,1,1,1" VerticalAlignment="Top" DockPanel.Dock="Bottom" />
              </Grid>
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Expander.IsExpanded" Value="True">
              <Setter TargetName="grid" Property="UIElement.Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="Expander.ExpandDirection" Value="Down">
              <Setter TargetName="grid" Property="FrameworkElement.Margin" Value="1,0,1,0" />
            </Trigger>
            <Trigger Property="Expander.ExpandDirection" Value="Right">
              <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Right" />
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left" />
              <Setter TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}" Property="FrameworkElement.Style" />
              <Setter TargetName="border" Value="{DynamicResource ShadeBrushRight}" Property="Border.Background" />
              <Setter TargetName="grid" Property="FrameworkElement.Margin" Value="0,1,0,1" />
            </Trigger>
            <Trigger Property="Expander.ExpandDirection" Value="Up">
              <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Top" />
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Bottom" />
              <Setter TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}" Property="FrameworkElement.Style" />
              <Setter TargetName="border" Value="{DynamicResource ShadeBrushBottom}" Property="Border.Background" />
              <Setter TargetName="grid" Property="FrameworkElement.Margin" Value="1,0,1,0" />
            </Trigger>
            <Trigger Property="Expander.ExpandDirection" Value="Left">
              <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Left" />
              <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Right" />
              <Setter TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}" Property="FrameworkElement.Style" />
              <Setter TargetName="border" Value="{DynamicResource ShadeBrushLeft}" Property="Border.Background" />
              <Setter TargetName="grid" Property="FrameworkElement.Margin" Value="0,1,0,1" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
    <ControlTemplate.Resources>
      <Storyboard x:Key="HoverOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="HoverOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="PressedOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.6" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="PressedOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Rectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
    </ControlTemplate.Resources>
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition />
        <ColumnDefinition Width="20" />
      </Grid.ColumnDefinitions>
      <Rectangle Name="Rectangle" Grid.ColumnSpan="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="3" RadiusY="3" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}" StrokeThickness="2" />
      <Rectangle Name="HoverRectangle" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="3" RadiusY="3" Fill="{DynamicResource HoverBrush}" StrokeThickness="2" Grid.ColumnSpan="2" Opacity="0" Grid.Column="1" Margin="0,2,2,2" Stroke="{x:Null}" />
      <Rectangle Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="2" RadiusY="2" Margin="2,2,0,2" Stroke="{x:Null}">
        <Rectangle.Fill>
          <SolidColorBrush Color="{DynamicResource WhiteColor}" />
        </Rectangle.Fill>
      </Rectangle>
      <Path Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M0,0L4,4 8,0z" Margin="-2,2,0,0" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsMouseOver" Value="True">
        <Trigger.ExitActions>
          <BeginStoryboard Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
        </Trigger.ExitActions>
        <Trigger.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
        </Trigger.EnterActions>
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="true">
        <Trigger.ExitActions>
          <BeginStoryboard Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}" />
        </Trigger.ExitActions>
        <Trigger.EnterActions>
          <BeginStoryboard Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}" />
        </Trigger.EnterActions>
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Rectangle" Property="Shape.Fill" />
        <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Rectangle" Property="Shape.Stroke" />
        <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground" />
        <Setter Value="{DynamicResource DisabledForegroundBrush}" TargetName="Arrow" Property="Shape.Fill" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
    <Border Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Control.Background}" />
  </ControlTemplate>
  <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="Control.Template" Value="{DynamicResource ComboBoxTemplate}" />
  </Style>
  <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
    <Grid>
      <ToggleButton Name="ToggleButton" Grid.Column="2" Template="{DynamicResource ComboBoxToggleButton}" Focusable="False" ClickMode="Press" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
      <ContentPresenter Name="ContentSite" HorizontalAlignment="Left" Margin="3,3,23,3" VerticalAlignment="Center" Content="{TemplateBinding ComboBox.SelectionBoxItem}" ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}" IsHitTestVisible="False" />
      <TextBox Name="PART_EditableTextBox" Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}" HorizontalAlignment="Left" Margin="3,3,23,3" VerticalAlignment="Center" Focusable="True" Background="#00FFFFFF" IsReadOnly="{TemplateBinding ComboBox.IsReadOnly}" Style="{x:Null}" />
      <Popup Name="Popup" IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}" Placement="Bottom" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
        <Grid Name="DropDown" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}" MinWidth="{TemplateBinding FrameworkElement.ActualWidth}" SnapsToDevicePixels="True">
          <Border Name="DropDownBorder" Background="{DynamicResource ShadeBrush}" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" />
          <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True" ScrollViewer.HorizontalScrollBarVisibility="Auto" ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.CanContentScroll="True">
            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
          </ScrollViewer>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ItemsControl.HasItems" Value="False">
        <Setter TargetName="DropDownBorder" Property="FrameworkElement.MinHeight" Value="95" />
      </Trigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground" />
      </Trigger>
      <Trigger Property="ItemsControl.IsGrouping" Value="True">
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
      </Trigger>
      <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
        <Setter TargetName="DropDownBorder" Property="FrameworkElement.Margin" Value="0,0,0,0" />
        <Setter TargetName="DropDownBorder" Property="Border.CornerRadius" Value="3,3,3,3" />
      </Trigger>
      <Trigger Property="ComboBox.IsEditable" Value="True">
        <Setter Property="Control.IsTabStop" Value="False" />
        <Setter TargetName="PART_EditableTextBox" Property="UIElement.Visibility" Value="Visible" />
        <Setter TargetName="ContentSite" Property="UIElement.Visibility" Value="Hidden" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="SelectedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Grid SnapsToDevicePixels="True" Margin="0,1,0,1">
            <Border Name="Border" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" />
            <Border Name="SelectedBorder" Background="{DynamicResource NormalBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Opacity="0" />
            <Border Name="HoverBorder" Background="{DynamicResource HoverBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Opacity="0" />
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Margin="5,2,0,2" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Trigger.ExitActions>
                <BeginStoryboard Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
              </Trigger.ExitActions>
              <Trigger.EnterActions>
                <BeginStoryboard Name="HoverOn_BeginStoryboard" Storyboard="{StaticResource HoverOn}" />
              </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="ComboBoxItem.IsHighlighted" Value="True">
              <Trigger.ExitActions>
                <BeginStoryboard Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}" />
              </Trigger.ExitActions>
              <Trigger.EnterActions>
                <BeginStoryboard Name="SelectedOn_BeginStoryboard" Storyboard="{StaticResource SelectedOn}" />
              </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Background" Value="{DynamicResource SelectedBackgroundBrush}" />
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}" />
  </Style>
  <Style x:Key="{x:Type ProgressBar}" TargetType="{x:Type ProgressBar}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="IndeterminateOn">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateGradientFill" Storyboard.TargetProperty="(Shape.Fill).(LinearGradientBrush.Transform).(TransformGroup.Children)[0].X" RepeatBehavior="Forever">
                <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                <SplineDoubleKeyFrame KeyTime="00:00:.5" Value="20" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Grid>
            <Border Name="PART_Track" Background="{DynamicResource ShadeBrush}" BorderBrush="{DynamicResource DisabledBackgroundBrush}" BorderThickness="2,2,2,2" CornerRadius="6,6,6,6" />
            <Border Name="PART_Indicator" HorizontalAlignment="Left" Background="{DynamicResource NormalBrush}" BorderThickness="1" CornerRadius="7,7,7,7" BorderBrush="{x:Null}" />
            <Grid Name="IndeterminateRoot" Visibility="Collapsed">
              <Rectangle Name="IndeterminateGradientFill" Margin="1,1,1,1" Opacity="0.7" RadiusX="5" RadiusY="5" StrokeThickness="0">
                <Rectangle.Fill>
                  <LinearGradientBrush EndPoint="0,1" StartPoint="20,1" MappingMode="Absolute" SpreadMethod="Repeat">
                    <LinearGradientBrush.Transform>
                      <TransformGroup>
                        <TranslateTransform X="0" />
                        <SkewTransform AngleX="-30" />
                      </TransformGroup>
                    </LinearGradientBrush.Transform>
                    <GradientStop Color="#FFFFFFFF" Offset="0" />
                    <GradientStop Color="#00FFFFFF" Offset=".25" />
                    <GradientStop Color="#FFFFFFFF" Offset="0.85" />
                  </LinearGradientBrush>
                </Rectangle.Fill>
                <Rectangle.OpacityMask>
                  <LinearGradientBrush EndPoint="0.004,0.465" StartPoint="0.997,0.422">
                    <GradientStop Color="#00FFFFFF" />
                    <GradientStop Color="#00FFFFFF" Offset="1" />
                    <GradientStop Color="#FFFFFFFF" Offset="0.486" />
                  </LinearGradientBrush>
                </Rectangle.OpacityMask>
              </Rectangle>
            </Grid>
            <Border Name="DisabledBorder" Background="{DynamicResource DisabledBackgroundBrush}" BorderBrush="{DynamicResource DisabledBackgroundBrush}" BorderThickness="2,2,2,2" CornerRadius="6,6,6,6" Opacity="0" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="DisabledBorder" Property="UIElement.Opacity" Value="0.8" />
            </Trigger>
            <Trigger Property="ProgressBar.IsIndeterminate" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource IndeterminateOn}" />
              </Trigger.EnterActions>
              <Setter TargetName="IndeterminateRoot" Property="UIElement.Visibility" Value="Visible" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}">
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="UIElement.AllowDrop" Value="True" />
    <Setter Property="Control.Template" Value="{DynamicResource TextBoxTemplate}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="Control.Background" Value="{DynamicResource ShadeBrush}" />
  </Style>
  <ControlTemplate x:Key="TextBoxTemplate" TargetType="{x:Type TextBox}">
    <ControlTemplate.Resources>
      <Storyboard x:Key="HoverOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="HoverOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="FocusedOn">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
      <Storyboard x:Key="FocusedOff">
        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
          <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
        </DoubleAnimationUsingKeyFrames>
      </Storyboard>
    </ControlTemplate.Resources>
    <Grid>
      <Border Name="Border" Opacity="1" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2,2,2,2">
        <Grid>
          <Border BorderThickness="1" CornerRadius="1,1,1,1">
            <Border.BorderBrush>
              <SolidColorBrush Color="Transparent" x:Name="MouseOverColor" />
            </Border.BorderBrush>
            <ScrollViewer Name="PART_ContentHost" Margin="0" Background="{TemplateBinding Control.Background}" />
          </Border>
        </Grid>
      </Border>
      <Border Name="HoverBorder" Opacity="0" BorderBrush="{StaticResource NormalBrush}" BorderThickness="2,2,2,2" CornerRadius="2,2,2,2" />
      <Border Name="DisabledVisualElement" IsHitTestVisible="False" Opacity="0" Background="#FFFFFFFF" BorderBrush="#A5F7F7F7" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2,2,2,2" />
      <Border Name="FocusVisualElement" IsHitTestVisible="False" Opacity="0" BorderBrush="{StaticResource NormalBrush}" BorderThickness="2.1,2.1,2.1,2.1" CornerRadius="0.2,0.2,0.2,0.2" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="UIElement.IsFocused" Value="True">
        <Trigger.ExitActions>
          <BeginStoryboard Name="FocusedOff_BeginStoryboard" Storyboard="{StaticResource FocusedOff}" />
        </Trigger.ExitActions>
        <Trigger.EnterActions>
          <BeginStoryboard Name="FocusedOn_BeginStoryboard" Storyboard="{StaticResource FocusedOn}" />
        </Trigger.EnterActions>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.ExitActions>
          <BeginStoryboard Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
        </MultiTrigger.ExitActions>
        <MultiTrigger.EnterActions>
          <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
        </MultiTrigger.EnterActions>
        <MultiTrigger.Conditions>
          <Condition Property="UIElement.IsMouseOver" Value="True" />
          <Condition Property="UIElement.IsFocused" Value="False" />
        </MultiTrigger.Conditions>
      </MultiTrigger>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background" />
        <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.BorderBrush" />
        <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="{x:Type PasswordBox}" TargetType="{x:Type PasswordBox}">
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="UIElement.AllowDrop" Value="True" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type PasswordBox}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="FocusedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="FocusedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Grid>
            <Border Name="Border" Opacity="1" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2,2,2,2">
              <Grid>
                <Border BorderThickness="1" CornerRadius="1,1,1,1">
                  <Border.BorderBrush>
                    <SolidColorBrush Color="Transparent" x:Name="MouseOverColor" />
                  </Border.BorderBrush>
                  <ScrollViewer Name="PART_ContentHost" Margin="0" Background="{TemplateBinding Control.Background}" />
                </Border>
              </Grid>
            </Border>
            <Border Name="HoverBorder" Opacity="0" BorderBrush="{StaticResource NormalBrush}" BorderThickness="2,2,2,2" CornerRadius="2,2,2,2" />
            <Border Name="DisabledVisualElement" IsHitTestVisible="False" Opacity="0" Background="#FFFFFFFF" BorderBrush="#A5F7F7F7" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2,2,2,2" />
            <Border Name="FocusVisualElement" IsHitTestVisible="False" Opacity="0" BorderBrush="{StaticResource NormalBrush}" BorderThickness="2.1,2.1,2.1,2.1" CornerRadius="0.2,0.2,0.2,0.2" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsFocused" Value="True">
              <Trigger.ExitActions>
                <BeginStoryboard Name="FocusedOff_BeginStoryboard" Storyboard="{StaticResource FocusedOff}" />
              </Trigger.ExitActions>
              <Trigger.EnterActions>
                <BeginStoryboard Name="FocusedOn_BeginStoryboard" Storyboard="{StaticResource FocusedOn}" />
              </Trigger.EnterActions>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.ExitActions>
                <BeginStoryboard Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
              </MultiTrigger.ExitActions>
              <MultiTrigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
              </MultiTrigger.EnterActions>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="True" />
                <Condition Property="UIElement.IsFocused" Value="False" />
              </MultiTrigger.Conditions>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background" />
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.BorderBrush" />
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="Control.Background" Value="{DynamicResource ShadeBrush}" />
  </Style>
  <Style x:Key="{x:Type RichTextBox}" TargetType="{x:Type RichTextBox}">
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="UIElement.AllowDrop" Value="True" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RichTextBox}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="FocusedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="FocusedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Grid>
            <Border Name="Border" Opacity="1" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2,2,2,2">
              <Grid>
                <Border BorderThickness="1" CornerRadius="1,1,1,1">
                  <Border.BorderBrush>
                    <SolidColorBrush Color="Transparent" x:Name="MouseOverColor" />
                  </Border.BorderBrush>
                  <ScrollViewer Name="PART_ContentHost" Margin="0" Background="{TemplateBinding Control.Background}" />
                </Border>
              </Grid>
            </Border>
            <Border Name="HoverBorder" Opacity="0" BorderBrush="{StaticResource NormalBrush}" BorderThickness="2,2,2,2" CornerRadius="2,2,2,2" />
            <Border Name="DisabledVisualElement" IsHitTestVisible="False" Opacity="0" Background="#FFFFFFFF" BorderBrush="#A5F7F7F7" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2,2,2,2" />
            <Border Name="FocusVisualElement" IsHitTestVisible="False" Opacity="0" BorderBrush="{StaticResource NormalBrush}" BorderThickness="2.1,2.1,2.1,2.1" CornerRadius="0.2,0.2,0.2,0.2" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsFocused" Value="True">
              <Trigger.ExitActions>
                <BeginStoryboard Name="FocusedOff_BeginStoryboard" Storyboard="{StaticResource FocusedOff}" />
              </Trigger.ExitActions>
              <Trigger.EnterActions>
                <BeginStoryboard Name="FocusedOn_BeginStoryboard" Storyboard="{StaticResource FocusedOn}" />
              </Trigger.EnterActions>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.ExitActions>
                <BeginStoryboard Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
              </MultiTrigger.ExitActions>
              <MultiTrigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
              </MultiTrigger.EnterActions>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="True" />
                <Condition Property="UIElement.IsFocused" Value="False" />
              </MultiTrigger.Conditions>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background" />
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.BorderBrush" />
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="Control.Background" Value="{DynamicResource ShadeBrush}" />
  </Style>
  <Style x:Key="{x:Type Label}" TargetType="{x:Type Label}">
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Left" />
    <Setter Property="Control.VerticalContentAlignment" Value="Top" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Label}">
          <Grid>
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="False" />
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type Menu}" TargetType="{x:Type Menu}">
    <Setter Property="Control.Background" Value="{DynamicResource WindowBackgroundBrush}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Menu}">
          <Grid>
            <Border Name="Border" Margin="1" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" />
            <StackPanel Background="{TemplateBinding Control.Background}" IsItemsHost="True" ClipToBounds="True" Orientation="Horizontal" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background" />
              <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <DropShadowBitmapEffect x:Key="PopupDropShadow" ShadowDepth="1.5" Softness="0.15" />
  <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
    <Setter Property="Control.HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Control.VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Control.Background" Value="#00FFFFFF" />
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="HighlightedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HighlightedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Border Name="Border" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                <ColumnDefinition Width="14" />
              </Grid.ColumnDefinitions>
              <Border Name="border" Grid.Column="0" Grid.ColumnSpan="4" Background="{DynamicResource NormalBrush}" Opacity="0" />
              <ContentPresenter Name="Icon" Margin="4,0,6,0" VerticalAlignment="Center" ContentSource="Icon" />
              <Grid Name="GlyphPanel" Visibility="Hidden" Margin="4,0,6,0" VerticalAlignment="Center">
                <Path Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Control.Foreground}" Data="M0,2L0,4.8 2.5,7.4 7.1,2.8 7.1,0 2.5,4.6z" FlowDirection="LeftToRight" />
              </Grid>
              <ContentPresenter Name="HeaderHost" Grid.Column="1" Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="True" ContentSource="Header" />
              <Grid Name="ArrowPanel" Grid.Column="3" Margin="4,0,6,0" VerticalAlignment="Center">
                <Path Name="ArrowPanelPath" VerticalAlignment="Center" Fill="{TemplateBinding Control.Foreground}" Data="M0,0L0,8 4,4z" />
              </Grid>
              <Popup Name="SubMenuPopup" Placement="Right" Focusable="False" AllowsTransparency="True" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" VerticalOffset="-3" IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <Grid Name="SubMenu">
                  <Border Name="SubMenuBorder" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" />
                  <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                </Grid>
              </Popup>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="MenuItem.Role" Value="TopLevelHeader">
              <Setter Property="FrameworkElement.Margin" Value="0,1,0,1" />
              <Setter Property="Control.Padding" Value="6,3,6,3" />
              <Setter Property="Grid.IsSharedSizeScope" Value="True" />
              <Setter TargetName="SubMenuPopup" Property="Popup.Placement" Value="Bottom" />
              <Setter TargetName="ArrowPanel" Property="UIElement.Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="MenuItem.Role" Value="TopLevelItem">
              <Setter Property="FrameworkElement.Margin" Value="0,1,0,1" />
              <Setter Property="Control.Padding" Value="6,3,6,3" />
              <Setter TargetName="ArrowPanel" Property="UIElement.Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="MenuItem.Role" Value="SubmenuHeader">
              <Setter Property="DockPanel.Dock" Value="Top" />
              <Setter Property="Control.Padding" Value="0,2,0,2" />
              <Setter Property="Grid.IsSharedSizeScope" Value="True" />
            </Trigger>
            <Trigger Property="MenuItem.Role" Value="SubmenuItem">
              <Setter Property="DockPanel.Dock" Value="Top" />
              <Setter Property="Control.Padding" Value="0,2,0,2" />
              <Setter TargetName="ArrowPanel" Property="UIElement.Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="True">
              <Setter TargetName="SubMenuPopup" Property="Popup.PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Value="{x:Null}" Property="MenuItem.Icon">
              <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="MenuItem.IsChecked" Value="True">
              <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible" />
              <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger SourceName="SubMenuPopup" Property="Popup.AllowsTransparency" Value="True">
              <Setter TargetName="SubMenu" Property="FrameworkElement.Margin" Value="0,0,3,3" />
              <Setter TargetName="SubMenu" Property="UIElement.SnapsToDevicePixels" Value="True" />
              <Setter Value="{DynamicResource PopupDropShadow}" TargetName="SubMenuBorder" Property="UIElement.BitmapEffect" />
            </Trigger>
            <Trigger Property="MenuItem.IsHighlighted" Value="True">
              <Trigger.ExitActions>
                <BeginStoryboard Name="HighlightedOff_BeginStoryboard" Storyboard="{StaticResource HighlightedOff}" />
              </Trigger.ExitActions>
              <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HighlightedOn}" />
              </Trigger.EnterActions>
              <Setter Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" Property="Control.Foreground" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type Separator}" TargetType="{x:Type Separator}">
    <Setter Property="FrameworkElement.Height" Value="1" />
    <Setter Property="FrameworkElement.Margin" Value="0,2,0,2" />
    <Setter Property="UIElement.Focusable" Value="False" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type TabControl}" TargetType="{x:Type TabControl}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
          <Grid ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Name="ColumnDefinition0" />
              <ColumnDefinition Name="ColumnDefinition1" Width="0" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Name="RowDefinition0" Height="Auto" />
              <RowDefinition Name="RowDefinition1" Height="*" />
            </Grid.RowDefinitions>
            <Border Name="border" CornerRadius="2,2,0,0" Margin="3,0,0,-2">
              <TabPanel Name="HeaderPanel" IsItemsHost="True" ZIndex="1" KeyboardNavigation.TabIndex="1" RenderTransformOrigin="0.5,0.5" Width="Auto" Height="Auto">
                <TabPanel.LayoutTransform>
                  <TransformGroup>
                    <ScaleTransform ScaleX="1" ScaleY="1" />
                    <SkewTransform AngleX="0" AngleY="0" />
                    <RotateTransform Angle="0" />
                    <TranslateTransform X="0" Y="0" />
                  </TransformGroup>
                </TabPanel.LayoutTransform>
                <TabPanel.RenderTransform>
                  <TransformGroup>
                    <ScaleTransform ScaleX="1" ScaleY="1" />
                    <SkewTransform AngleX="0" AngleY="0" />
                    <RotateTransform />
                    <TranslateTransform X="0" Y="0" />
                  </TransformGroup>
                </TabPanel.RenderTransform>
              </TabPanel>
            </Border>
            <Border Name="ContentPanel" Grid.Row="1" Background="{DynamicResource ShadeBrushTop}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1" CornerRadius="0,0,3,3" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.TabIndex="2">
              <ContentPresenter Name="PART_SelectedContentHost" Margin="4" ContentSource="SelectedContent" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
              <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*" />
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="Auto" />
              <Setter TargetName="border" Property="Grid.Row" Value="1" />
              <Setter TargetName="border" Property="Border.CornerRadius" Value="0,0,2,2" />
              <Setter TargetName="ContentPanel" Property="Border.CornerRadius" Value="3,3,0,0" />
            </Trigger>
            <Trigger Property="TabControl.TabStripPlacement" Value="Left">
              <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0" />
              <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
              <Setter TargetName="ContentPanel" Property="Grid.Column" Value="1" />
              <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="Auto" />
              <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="*" />
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*" />
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0" />
              <Setter TargetName="border" Property="Grid.Column" Value="0" />
              <Setter TargetName="border" Property="FrameworkElement.Margin" Value="0,0,0,0" />
              <Setter TargetName="ContentPanel" Property="FrameworkElement.Margin" Value="0,0,0,0" />
              <Setter TargetName="border" Property="Border.CornerRadius" Value="0,2,2,0" />
              <Setter TargetName="ContentPanel" Property="Border.CornerRadius" Value="0,3,3,0" />
            </Trigger>
            <Trigger Property="TabControl.TabStripPlacement" Value="Right">
              <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0" />
              <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
              <Setter TargetName="ContentPanel" Property="Grid.Column" Value="0" />
              <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="*" />
              <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="Auto" />
              <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*" />
              <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0" />
              <Setter TargetName="border" Property="Grid.Column" Value="1" />
              <Setter TargetName="border" Property="Border.CornerRadius" Value="0,2,2,0" />
              <Setter TargetName="ContentPanel" Property="Border.CornerRadius" Value="3,0,0,3" />
              <Setter TargetName="border" Property="FrameworkElement.Margin" Value="0,0,0,-2" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type TabItem}" TargetType="{x:Type TabItem}">
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Grid Name="grid">
            <Grid.LayoutTransform>
              <TransformGroup>
                <ScaleTransform ScaleX="1" ScaleY="1" />
                <SkewTransform AngleX="0" AngleY="0" />
                <RotateTransform Angle="0" />
                <TranslateTransform X="0" Y="0" />
              </TransformGroup>
            </Grid.LayoutTransform>
            <Grid Margin="1,0,1,0">
              <Border Name="Border" Background="{DynamicResource SelectedBackgroundBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="3,3,0,0" />
              <Border Name="SelectedBorder" Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="2,2,2,0" CornerRadius="3,3,0,0" Opacity="0" Margin="-2,0,-2,0" />
              <Border Name="HoverBorder" Background="{DynamicResource HoverBrush}" BorderThickness="1,1,1,1" CornerRadius="3,3,0,0" Opacity="0" BorderBrush="{x:Null}" />
              <Border Name="SelectedHoverBorder" Background="{DynamicResource HoverBrush}" BorderThickness="1,1,1,1" CornerRadius="3,3,0,0" Opacity="0" BorderBrush="{x:Null}" />
              <ContentPresenter Name="ContentSite" HorizontalAlignment="Center" Margin="6,3,6,3" VerticalAlignment="Center" RecognizesAccessKey="True" ContentSource="Header" />
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="TabItem.TabStripPlacement" Value="Left">
              <Setter TargetName="grid" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <TransformGroup>
                    <ScaleTransform ScaleX="1" ScaleY="1" />
                    <SkewTransform AngleX="0" AngleY="0" />
                    <RotateTransform Angle="-90" />
                    <TranslateTransform X="0" Y="0" />
                  </TransformGroup>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="TabItem.TabStripPlacement" Value="Right">
              <Setter TargetName="grid" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <TransformGroup>
                    <ScaleTransform ScaleX="1" ScaleY="1" />
                    <SkewTransform AngleX="0" AngleY="0" />
                    <RotateTransform Angle="90" />
                    <TranslateTransform X="0" Y="0" />
                  </TransformGroup>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="TabItem.TabStripPlacement" Value="Bottom">
              <Setter TargetName="ContentSite" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <TransformGroup>
                    <ScaleTransform ScaleX="1" ScaleY="1" />
                    <SkewTransform AngleX="0" AngleY="0" />
                    <RotateTransform Angle="180" />
                    <TranslateTransform X="0" Y="0" />
                  </TransformGroup>
                </Setter.Value>
              </Setter>
              <Setter TargetName="grid" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <TransformGroup>
                    <ScaleTransform ScaleX="1" ScaleY="1" />
                    <SkewTransform AngleX="0" AngleY="0" />
                    <RotateTransform Angle="180" />
                    <TranslateTransform X="0" Y="0" />
                  </TransformGroup>
                </Setter.Value>
              </Setter>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.ExitActions>
                <BeginStoryboard Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
              </MultiTrigger.ExitActions>
              <MultiTrigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
              </MultiTrigger.EnterActions>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="True" />
                <Condition Property="Selector.IsSelected" Value="False" />
              </MultiTrigger.Conditions>
            </MultiTrigger>
            <Trigger Property="TabItem.IsSelected" Value="True">
              <Trigger.ExitActions>
                <BeginStoryboard Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}" />
              </Trigger.ExitActions>
              <Trigger.EnterActions>
                <BeginStoryboard Name="SelectedOn_BeginStoryboard" Storyboard="{StaticResource SelectedOn}" />
              </Trigger.EnterActions>
              <Setter Property="Panel.ZIndex" Value="100" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="grid" Property="UIElement.IsMouseOver" Value="True" />
                <Condition Property="Selector.IsSelected" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="SelectedHoverBorder" Property="UIElement.Opacity" Value="0.6" />
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground" />
              <Setter TargetName="Border" Value="{DynamicResource DisabledBackgroundBrush}" Property="Border.Background" />
              <Setter TargetName="Border" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers />
  </Style>
  <Style x:Key="NuclearSliderThumb" TargetType="{x:Type Thumb}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="FrameworkElement.Height" Value="14" />
    <Setter Property="FrameworkElement.Width" Value="14" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Grid>
            <Rectangle Name="Base" RadiusX="6" RadiusY="6" Fill="#FF000000" StrokeThickness="2" />
            <Rectangle Name="Background" Fill="{TemplateBinding Control.Background}" Stroke="{TemplateBinding Control.BorderBrush}" StrokeThickness="2" RadiusX="4" RadiusY="4" />
            <Rectangle Name="BackgroundAnimation" Opacity="0" Fill="{StaticResource HoverBrush}" RadiusX="3" RadiusY="3" Margin="2,2,2,2" StrokeThickness="0" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Trigger.ExitActions>
                <BeginStoryboard Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
              </Trigger.ExitActions>
              <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
              </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Base" Property="Shape.Fill" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type Slider}" TargetType="{x:Type Slider}">
    <Setter Property="Control.Background" Value="{DynamicResource SelectedBackgroundBrush}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource HorizontalSliderBorderBrush}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Slider}">
          <Grid Name="GridRoot">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" MinHeight="{TemplateBinding FrameworkElement.MinHeight}" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <TickBar Name="TopTick" Visibility="Collapsed" Height="4" SnapsToDevicePixels="True" Placement="Top" Fill="{DynamicResource GlyphBrush}" />
            <Border Name="Border" Grid.Row="1" Margin="0" Height="4" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2" />
            <Track Name="PART_Track" Grid.Row="1">
              <Track.Thumb>
                <Thumb Style="{DynamicResource NuclearSliderThumb}" Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="2,2,2,2" Width="24" Height="13" />
              </Track.Thumb>
              <Track.IncreaseRepeatButton>
                <RepeatButton Style="{DynamicResource NuclearScrollRepeatButtonStyle}" Command="Slider.IncreaseLarge" />
              </Track.IncreaseRepeatButton>
              <Track.DecreaseRepeatButton>
                <RepeatButton Style="{DynamicResource NuclearScrollRepeatButtonStyle}" Command="Slider.DecreaseLarge" />
              </Track.DecreaseRepeatButton>
            </Track>
            <TickBar Name="BottomTick" Visibility="Collapsed" Grid.Row="2" Height="4" SnapsToDevicePixels="True" Placement="Bottom" Fill="{TemplateBinding Control.Foreground}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Slider.TickPlacement" Value="TopLeft">
              <Setter TargetName="TopTick" Property="UIElement.Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="Slider.TickPlacement" Value="BottomRight">
              <Setter TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="Slider.TickPlacement" Value="Both">
              <Setter TargetName="TopTick" Property="UIElement.Visibility" Value="Visible" />
              <Setter TargetName="BottomTick" Property="UIElement.Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border" Property="Border.Background" />
              <Setter Value="{DynamicResource DisabledBorderBrush}" TargetName="Border" Property="Border.BorderBrush" />
            </Trigger>
            <Trigger Property="Slider.Orientation" Value="Vertical">
              <Setter TargetName="GridRoot" Property="FrameworkElement.LayoutTransform">
                <Setter.Value>
                  <RotateTransform Angle="-90" />
                </Setter.Value>
              </Setter>
              <Setter TargetName="PART_Track" Property="Track.Orientation" Value="Horizontal" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.BorderThickness" Value="1,1,1,1" />
  </Style>
  <Style x:Key="{x:Type TreeView}" TargetType="{x:Type TreeView}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeView}">
          <Grid>
            <Border Name="Border" Background="{TemplateBinding Control.Background}" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" CornerRadius="3,3,3,3">
              <ScrollViewer Focusable="False" Padding="4" ScrollViewer.HorizontalScrollBarVisibility="Auto" ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.CanContentScroll="False">
                <ItemsPresenter />
              </ScrollViewer>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Background" Value="{DynamicResource ShadeBrush}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
  </Style>
  <Style x:Key="NuclearTreeViewItemToggleButton" TargetType="{x:Type ToggleButton}">
    <Setter Property="UIElement.Focusable" Value="False" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Grid Width="15" Height="13" Background="#00FFFFFF">
            <Path Name="IsExpandedPath" Visibility="Collapsed" HorizontalAlignment="Left" Margin="1,1,1,1" VerticalAlignment="Center" Data="M0,4L8,4 4,8z">
              <Path.Fill>
                <SolidColorBrush Color="{DynamicResource BlackColor}" />
              </Path.Fill>
            </Path>
            <Path Name="ExpandPath" HorizontalAlignment="Left" Margin="1,1,1,1" VerticalAlignment="Center" Data="M4,0L8,4 4,8z">
              <Path.Fill>
                <SolidColorBrush Color="{DynamicResource BlackColor}" />
              </Path.Fill>
            </Path>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
              <Setter TargetName="IsExpandedPath" Property="UIElement.Visibility" Value="Visible" />
              <Setter TargetName="ExpandPath" Property="UIElement.Visibility" Value="Collapsed" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type TreeViewItem}" TargetType="{x:Type TreeViewItem}">
    <Style.Triggers>
      <Trigger Property="TreeViewItem.IsSelected" Value="True">
        <Setter Property="Control.Foreground">
          <Setter.Value>
            <SolidColorBrush Color="{DynamicResource WhiteColor}" />
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
    <Setter Property="Control.Background" Value="#00FFFFFF" />
    <Setter Property="Control.HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Control.VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
    <Setter Property="Control.Padding" Value="1,0,0,0" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeViewItem}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="SelectedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder2" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder1" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder2" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder1" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedHoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedHoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition MinWidth="19" Width="Auto" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition />
            </Grid.RowDefinitions>
            <ToggleButton Name="Expander" Style="{DynamicResource NuclearTreeViewItemToggleButton}" ClickMode="Press" IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border Name="Selection_Border" Grid.Column="1" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" Padding="{TemplateBinding Control.Padding}">
              <Grid>
                <Border Name="SelectedBorder" Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="2,2,2,2" CornerRadius="2,2,2,2" Opacity="0" />
                <Border Name="HoverBorder1" Opacity="0" Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2" />
                <Border Name="HoverBorder2" Opacity="0" Background="{DynamicResource HoverBrush}" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2" BorderBrush="{x:Null}" />
                <ContentPresenter Name="PART_Header" HorizontalAlignment="Stretch" ContentSource="Header" Margin="3,2,3,2" />
                <Border Name="SelectedHoverBorder" Opacity="0" Background="{DynamicResource HoverBrush}" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2" BorderBrush="{x:Null}" />
              </Grid>
            </Border>
            <ItemsPresenter Name="ItemsHost" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="1" />
          </Grid>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.ExitActions>
                <BeginStoryboard Name="SelectedHoverOff_BeginStoryboard" Storyboard="{StaticResource SelectedHoverOff}" />
              </MultiTrigger.ExitActions>
              <MultiTrigger.EnterActions>
                <BeginStoryboard Name="SelectedHoverOn_BeginStoryboard" Storyboard="{StaticResource SelectedHoverOn}" />
              </MultiTrigger.EnterActions>
              <MultiTrigger.Conditions>
                <Condition Property="TreeViewItem.IsSelected" Value="True" />
                <Condition Property="UIElement.IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="TreeViewItem.IsSelected" Value="False" />
                <Condition SourceName="Selection_Border" Property="UIElement.IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
              <MultiTrigger.ExitActions>
                <BeginStoryboard Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
              </MultiTrigger.ExitActions>
              <MultiTrigger.EnterActions>
                <BeginStoryboard Name="HoverOn_BeginStoryboard" Storyboard="{StaticResource HoverOn}" />
              </MultiTrigger.EnterActions>
            </MultiTrigger>
            <Trigger Property="TreeViewItem.IsExpanded" Value="False">
              <Setter TargetName="ItemsHost" Property="UIElement.Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="ItemsControl.HasItems" Value="False">
              <Setter TargetName="Expander" Property="UIElement.Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="TreeViewItem.IsSelected" Value="True">
              <Trigger.ExitActions>
                <BeginStoryboard Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}" />
              </Trigger.ExitActions>
              <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource SelectedOn}" />
              </Trigger.EnterActions>
              <Setter Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" Property="Control.Foreground" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="TreeViewItem.IsSelected" Value="True" />
                <Condition Property="TreeViewItem.IsSelectionActive" Value="False" />
              </MultiTrigger.Conditions>
              <Setter Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" TargetName="Selection_Border" Property="Border.Background" />
              <Setter Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" Property="Control.Foreground" />
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}" BasedOn="{x:Null}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource NuclearButtonFocusVisual}" />
    <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="Control.Template" Value="{DynamicResource ButtonTemplate}" />
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Control.FontSize" Value="10" />
    <Setter Property="FrameworkElement.MinHeight" Value="18" />
    <Setter Property="FrameworkElement.MinWidth" Value="50" />
  </Style>
  <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" TargetType="{x:Type RadioButton}">
    <Setter Property="Control.FontSize" Value="10" />
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}" />
    <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}" />
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="Control.Template" Value="{DynamicResource RadioButtonTemplate}" />
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="Control.Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" TargetType="{x:Type CheckBox}">
    <Setter Property="Control.FontSize" Value="10" />
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}" />
    <Setter Property="Control.Background" Value="{DynamicResource NormalBrush}" />
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="Control.Template" Value="{DynamicResource CheckBoxTemplate}" />
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="Control.Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
    <Setter Property="Control.FontSize" Value="10" />
    <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
    <Setter Property="Control.Template" Value="{DynamicResource ComboBoxTemplate}" />
  </Style>
  <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" TargetType="{x:Type TextBox}">
    <Setter Property="Control.FontSize" Value="10" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="UIElement.AllowDrop" Value="True" />
    <Setter Property="Control.Template" Value="{DynamicResource TextBoxTemplate}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="Control.Background" Value="{DynamicResource ShadeBrush}" />
  </Style>
  <LinearGradientBrush x:Key="ToolBarHorizontalBackground" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#FFFFFF" Offset="0" />
    <GradientStop Color="#FFFBFF" Offset="0.5" />
    <GradientStop Color="#F7F7F7" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="ToolBarToggleButtonHorizontalBackground" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#ECECEC" Offset="0" />
    <GradientStop Color="#DDDDDD" Offset="0.5" />
    <GradientStop Color="#A0A0A0" Offset="1" />
  </LinearGradientBrush>
  <SolidColorBrush x:Key="ToolBarButtonHover" Color="{StaticResource NormalBrushGradient1}" />
  <SolidColorBrush x:Key="ToolBarGripper" Color="#C6C3C6" />
  <Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{StaticResource ToolBarToggleButtonHorizontalBackground}" />
    <Setter Property="FrameworkElement.MinHeight" Value="0" />
    <Setter Property="FrameworkElement.MinWidth" Value="0" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Name="Bd" SnapsToDevicePixels="True" CornerRadius="0,0,0,0" Background="{DynamicResource SelectedBackgroundBrush}">
            <Canvas SnapsToDevicePixels="True" HorizontalAlignment="Right" Margin="7,2,2,2" VerticalAlignment="Bottom" Width="6" Height="7">
              <Path Stroke="#FFFFFFFF" Data="M1,1.5L6,1.5" />
              <Path Stroke="{TemplateBinding Control.Foreground}" Data="M0,0.5L5,0.5" />
              <Path Fill="#FFFFFFFF" Data="M0.5,4L6.5,4 3.5,7z" />
              <Path Fill="{TemplateBinding Control.Foreground}" Data="M-0.5,3L5.5,3 2.5,6z" />
            </Canvas>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="Bd" Value="{DynamicResource MouseOverBrush}" Property="Border.Background" />
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="True">
              <Setter TargetName="Bd" Value="{StaticResource ToolBarButtonHover}" Property="Border.Background" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{StaticResource ToolBarGripper}" Property="Control.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="ToolBarSubMenuBackground" Color="#FFFDFDFD" />
  <SolidColorBrush x:Key="ToolBarMenuBorder" Color="#FFFFFFFF" />
  <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border SnapsToDevicePixels="True" Background="#00FFFFFF" Padding="{TemplateBinding Control.Padding}" CornerRadius="0,0,0,0">
            <Rectangle>
              <Rectangle.Fill>
                <DrawingBrush TileMode="Tile" Viewbox="0,0,4,4" ViewboxUnits="Absolute" Viewport="0,0,4,4" ViewportUnits="Absolute">
                  <DrawingBrush.Drawing>
                    <DrawingGroup>
                      <GeometryDrawing Brush="#FFFFFFFF" Geometry="M1,1L1,3 3,3 3,1z" />
                      <GeometryDrawing Brush="{StaticResource ToolBarGripper}" Geometry="M0,0L0,2 2,2 2,0z" />
                    </DrawingGroup>
                  </DrawingBrush.Drawing>
                </DrawingBrush>
              </Rectangle.Fill>
            </Rectangle>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter Property="FrameworkElement.Cursor" Value="SizeAll" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <LinearGradientBrush x:Key="ToolBarToggleButtonVerticalBackground" EndPoint="1,0" StartPoint="0,0">
    <GradientStop Color="#ECECEC" Offset="0" />
    <GradientStop Color="#DDDDDD" Offset="0.5" />
    <GradientStop Color="#A0A0A0" Offset="1" />
  </LinearGradientBrush>
  <Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Control.Background" Value="{StaticResource ToolBarToggleButtonVerticalBackground}" />
    <Setter Property="FrameworkElement.MinHeight" Value="0" />
    <Setter Property="FrameworkElement.MinWidth" Value="0" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Name="Bd" SnapsToDevicePixels="True" Background="{TemplateBinding Control.Background}" CornerRadius="0,0,3,3">
            <Canvas SnapsToDevicePixels="True" HorizontalAlignment="Right" Margin="2,7,2,2" VerticalAlignment="Bottom" Width="7" Height="6">
              <Path Stroke="#FFFFFFFF" Data="M1.5,1L1.5,6" />
              <Path Stroke="{TemplateBinding Control.Foreground}" Data="M0.5,0L0.5,5" />
              <Path Fill="#FFFFFFFF" Data="M3.5,0.5L7,3.5 4,6.5z" />
              <Path Fill="{TemplateBinding Control.Foreground}" Data="M3,-0.5L6,2.5 3,5.5z" />
            </Canvas>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Setter TargetName="Bd" Value="{StaticResource ToolBarButtonHover}" Property="Border.Background" />
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="True">
              <Setter TargetName="Bd" Value="{StaticResource ToolBarButtonHover}" Property="Border.Background" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{StaticResource ToolBarGripper}" Property="Control.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <LinearGradientBrush x:Key="ToolBarVerticalBackground" EndPoint="1,0" StartPoint="0,0">
    <GradientStop Color="#FFFFFF" Offset="0" />
    <GradientStop Color="#FFFBFF" Offset="0.5" />
    <GradientStop Color="#F7F7F7" Offset="1" />
  </LinearGradientBrush>
  <Style x:Key="{x:Type ToolBar}" TargetType="{x:Type ToolBar}">
    <Setter Property="Control.Background" Value="{StaticResource ToolBarHorizontalBackground}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolBar}">
          <Grid Name="Grid" SnapsToDevicePixels="True" Margin="3,1,1,1">
            <Grid Name="OverflowGrid" HorizontalAlignment="Right">
              <ToggleButton Name="OverflowButton" IsEnabled="{TemplateBinding ToolBar.HasOverflowItems}" Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}" ClickMode="Press" FocusVisualStyle="{x:Null}" IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
              <Popup Name="OverflowPopup" Focusable="False" AllowsTransparency="True" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" StaysOpen="False" IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <Border Name="Shdw">
                  <Border BorderThickness="1,1,1,1" Background="{DynamicResource ShadeBrush}" BorderBrush="{DynamicResource LightBrush}">
                    <ToolBarOverflowPanel Name="PART_ToolBarOverflowPanel" Focusable="True" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Margin="2" WrapWidth="200" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle" FocusVisualStyle="{x:Null}" />
                  </Border>
                </Border>
              </Popup>
            </Grid>
            <Border Name="MainPanelBorder" Margin="0,0,11,0" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="0,0,0,0" Padding="{TemplateBinding Control.Padding}" Background="{DynamicResource SelectedBackgroundBrush}">
              <Grid>
                <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                  <Thumb Name="ToolBarThumb" Padding="6,5,1,6" Margin="-3,-1,0,0" Style="{StaticResource ToolBarThumbStyle}" Width="10" />
                  <ContentPresenter Name="ToolBarHeader" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" HorizontalAlignment="Center" Margin="4,0,4,0" VerticalAlignment="Center" ContentSource="Header" />
                  <ToolBarPanel Name="PART_ToolBarPanel" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Margin="0,1,2,2" IsItemsHost="True" Background="{DynamicResource SelectedBackgroundBrush}" />
                </DockPanel>
              </Grid>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ToolBar.IsOverflowOpen" Value="True">
              <Setter TargetName="ToolBarThumb" Property="UIElement.IsEnabled" Value="False" />
            </Trigger>
            <Trigger Value="{x:Null}" Property="HeaderedItemsControl.Header">
              <Setter TargetName="ToolBarHeader" Property="UIElement.Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="ToolBarTray.IsLocked" Value="True">
              <Setter TargetName="ToolBarThumb" Property="UIElement.Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger SourceName="OverflowPopup" Property="Popup.HasDropShadow" Value="True">
              <Setter TargetName="Shdw" Property="FrameworkElement.Margin" Value="0,0,5,5" />
              <Setter TargetName="Shdw" Property="UIElement.SnapsToDevicePixels" Value="True" />
              <Setter TargetName="Shdw" Property="Border.Background" Value="#71000000" />
            </Trigger>
            <Trigger Property="ToolBar.Orientation" Value="Vertical">
              <Setter TargetName="Grid" Property="FrameworkElement.Margin" Value="1,3,1,1" />
              <Setter TargetName="OverflowButton" Value="{StaticResource ToolBarVerticalOverflowButtonStyle}" Property="FrameworkElement.Style" />
              <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Height" Value="10" />
              <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Width" Value="Auto" />
              <Setter TargetName="ToolBarThumb" Property="FrameworkElement.Margin" Value="-1,-3,0,0" />
              <Setter TargetName="ToolBarThumb" Property="Control.Padding" Value="5,6,6,1" />
              <Setter TargetName="ToolBarHeader" Property="FrameworkElement.Margin" Value="0,0,0,4" />
              <Setter TargetName="PART_ToolBarPanel" Property="FrameworkElement.Margin" Value="1,0,2,2" />
              <Setter TargetName="ToolBarThumb" Property="DockPanel.Dock" Value="Top" />
              <Setter TargetName="ToolBarHeader" Property="DockPanel.Dock" Value="Top" />
              <Setter TargetName="OverflowGrid" Property="FrameworkElement.HorizontalAlignment" Value="Stretch" />
              <Setter TargetName="OverflowGrid" Property="FrameworkElement.VerticalAlignment" Value="Bottom" />
              <Setter TargetName="OverflowPopup" Property="Popup.Placement" Value="Right" />
              <Setter TargetName="MainPanelBorder" Property="FrameworkElement.Margin" Value="0,0,0,11" />
              <Setter Value="{StaticResource ToolBarVerticalBackground}" Property="Control.Background" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Foreground" Value="#FF000000" />
  </Style>
  <BorderGapMaskConverter x:Key="BorderGapMaskConverter" />
  <Style x:Key="{x:Type GroupBox}" TargetType="{x:Type GroupBox}">
    <Setter Property="Control.BorderBrush" Value="#FFD5DFE5" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type GroupBox}">
          <Grid SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="6" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="6" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
              <RowDefinition Height="6" />
            </Grid.RowDefinitions>
            <Border Grid.ColumnSpan="4" Grid.RowSpan="4" Background="{DynamicResource LightBrush}" CornerRadius="4,4,4,4" BorderThickness="1,1,1,1" />
            <Border Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3" BorderThickness="1,1,1,1" CornerRadius="4" BorderBrush="{DynamicResource NormalBorderBrush}">
              <Border.OpacityMask>
                <MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="7">
                  <Binding Path="ActualWidth" ElementName="Header" />
                  <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                  <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                </MultiBinding>
              </Border.OpacityMask>
              <Border BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="3">
                <Border.BorderBrush>
                  <SolidColorBrush Color="{DynamicResource MainColor}" />
                </Border.BorderBrush>
                <Border BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2">
                  <Border.BorderBrush>
                    <SolidColorBrush Color="{DynamicResource MainColor}" />
                  </Border.BorderBrush>
                </Border>
              </Border>
            </Border>
            <Border Grid.Column="0" Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3" Background="{TemplateBinding Control.Background}" BorderBrush="#00FFFFFF" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="4" />
            <Border Name="Main" Grid.ColumnSpan="4" Grid.RowSpan="2" Background="{DynamicResource NormalBrush}" BorderThickness="1,1,1,0" CornerRadius="2,2,0,0" BorderBrush="{DynamicResource NormalBorderBrush}" />
            <Rectangle Name="Shine" Opacity="1" RadiusX="3" RadiusY="3" VerticalAlignment="Stretch" Height="Auto" Grid.ColumnSpan="4" Grid.RowSpan="2" Margin="1,1,1,1" Stroke="{x:Null}">
              <Rectangle.Fill>
                <LinearGradientBrush EndPoint="0.5,0.971" StartPoint="0.5,0.042">
                  <GradientStop Color="#26FFFFFF" Offset="0" />
                  <GradientStop Color="#00FFFFFF" Offset="1" />
                  <GradientStop Color="#26FFFFFF" Offset="0.467" />
                  <GradientStop Color="#00FFFFFF" Offset="0.475" />
                </LinearGradientBrush>
              </Rectangle.Fill>
            </Rectangle>
            <Border Name="Header" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" Padding="3,1,3,0">
              <ContentPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" ContentSource="Header" RecognizesAccessKey="True" Margin="0,4,0,4" />
            </Border>
            <ContentPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Margin="{TemplateBinding Control.Padding}" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="2" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Foreground">
      <Setter.Value>
        <SolidColorBrush Color="{DynamicResource WhiteColor}" />
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="ListBorder" Color="#828790" />
  <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="{x:Type ScrollViewer}">
    <Setter Property="UIElement.Focusable" Value="False" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid SnapsToDevicePixels="True" Background="{TemplateBinding Control.Background}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <DockPanel Margin="{TemplateBinding Control.Padding}">
              <ScrollViewer Focusable="False" DockPanel.Dock="Top" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Hidden">
                <GridViewHeaderRowPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Margin="2,0,2,0" AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}">
                  <GridViewHeaderRowPresenter.Columns>
                    <Binding Path="TemplatedParent.View.Columns" RelativeSource="{RelativeSource TemplatedParent}" />
                  </GridViewHeaderRowPresenter.Columns>
                </GridViewHeaderRowPresenter>
              </ScrollViewer>
              <ScrollContentPresenter Name="PART_ScrollContentPresenter" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Content="{TemplateBinding ContentControl.Content}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" KeyboardNavigation.DirectionalNavigation="Local" />
            </DockPanel>
            <ScrollBar Name="PART_HorizontalScrollBar" Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}" Cursor="Arrow" Grid.Row="1" Orientation="Horizontal" ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}" Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" Minimum="0.0" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <ScrollBar Name="PART_VerticalScrollBar" Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}" Cursor="Arrow" Grid.Column="1" Orientation="Vertical" ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}" Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" Minimum="0.0" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <DockPanel Grid.Column="1" Grid.Row="1" LastChildFill="False" Background="{Binding Path=Background, ElementName=PART_VerticalScrollBar}">
              <Rectangle Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}" Width="1" Fill="#FFFFFFFF" DockPanel.Dock="Left" />
              <Rectangle Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}" Height="1" Fill="#FFFFFFFF" DockPanel.Dock="Top" />
            </DockPanel>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type ListView}" TargetType="{x:Type ListView}">
    <Setter Property="Control.Background" Value="{DynamicResource ShadeBrush}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="Control.Foreground" Value="#FF042271" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListView}">
          <Border Name="Bd" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2,2,2,2" BorderBrush="{DynamicResource DefaultedBorderBrush}" Background="{DynamicResource LightBrush}">
            <ScrollViewer Padding="{TemplateBinding Control.Padding}" Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
              <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
            </ScrollViewer>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.IsGrouping" Value="True">
              <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Property="Border.Background" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ListViewItemFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Stroke="#8E6EA6F5" StrokeThickness="1" RadiusX="2" RadiusY="2" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type ListViewItem}" TargetType="{x:Type ListViewItem}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource ListViewItemFocusVisual}" />
    <Setter Property="Control.Background" Value="#00FFFFFF" />
    <Setter Property="Control.BorderBrush" Value="#00FFFFFF" />
    <Setter Property="Control.BorderThickness" Value="1" />
    <Setter Property="FrameworkElement.Margin" Value="0,0,0,1" />
    <Setter Property="Control.Padding" Value="5,2,5,2" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedHoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedHoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SelectedHoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedHoverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Border Name="border" SnapsToDevicePixels="True" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="2">
            <Grid Margin="2,0,2,0">
              <Rectangle Name="Background" IsHitTestVisible="False" Fill="{StaticResource SelectedBackgroundBrush}" RadiusX="0" />
              <Rectangle Name="SelectedRectangle" IsHitTestVisible="False" Opacity="0" Fill="{StaticResource NormalBrush}" RadiusX="0" />
              <GridViewRowPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Stretch" Margin="0,2,0,2" />
              <Rectangle Name="HoverRectangle" IsHitTestVisible="False" Fill="{StaticResource HoverBrush}" RadiusX="0" Opacity="0" />
              <Rectangle Name="SelectedHoverRectangle" IsHitTestVisible="False" Fill="{StaticResource HoverBrush}" RadiusX="0" Opacity="0" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ListBoxItem.IsSelected" Value="True">
              <Trigger.ExitActions>
                <BeginStoryboard Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}" />
              </Trigger.ExitActions>
              <Trigger.EnterActions>
                <BeginStoryboard Name="SelectedOn_BeginStoryboard" Storyboard="{StaticResource SelectedOn}" />
              </Trigger.EnterActions>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.ExitActions>
                <BeginStoryboard Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
              </MultiTrigger.ExitActions>
              <MultiTrigger.EnterActions>
                <BeginStoryboard Name="HoverOn_BeginStoryboard" Storyboard="{StaticResource HoverOn}" />
              </MultiTrigger.EnterActions>
              <MultiTrigger.Conditions>
                <Condition Property="UIElement.IsMouseOver" Value="True" />
                <Condition Property="Selector.IsSelected" Value="False" />
              </MultiTrigger.Conditions>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.ExitActions>
                <BeginStoryboard Name="SelectedHoverOff_BeginStoryboard" Storyboard="{StaticResource SelectedHoverOff}" />
              </MultiTrigger.ExitActions>
              <MultiTrigger.EnterActions>
                <BeginStoryboard Name="SelectedHoverOn_BeginStoryboard" Storyboard="{StaticResource SelectedHoverOn}" />
              </MultiTrigger.EnterActions>
              <MultiTrigger.Conditions>
                <Condition Property="Selector.IsSelected" Value="True" />
                <Condition Property="UIElement.IsMouseOver" Value="True" />
              </MultiTrigger.Conditions>
            </MultiTrigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource DisabledForegroundBrush}" Property="Control.Foreground" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ListBoxItem.IsSelected" Value="True" />
                <Condition Property="Selector.IsSelectionActive" Value="False" />
              </MultiTrigger.Conditions>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}" />
  </Style>
  <Style x:Key="GridViewColumnHeaderGripper" TargetType="{x:Type Thumb}">
    <Setter Property="Canvas.Right" Value="-8.5" />
    <Setter Property="FrameworkElement.Width" Value="18" />
    <Setter Property="FrameworkElement.Height" Value="{Binding Path=ActualHeight, RelativeSource={RelativeSource TemplatedParent}}" />
    <Setter Property="Control.Padding" Value="0,3,0,4" />
    <Setter Property="Control.Background" Value="{DynamicResource LightBrush}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Padding="{TemplateBinding Control.Padding}" Background="#00FFFFFF">
            <Rectangle HorizontalAlignment="Center" Width="0.5">
              <Rectangle.Fill>
                <SolidColorBrush Color="{DynamicResource WhiteColor}" />
              </Rectangle.Fill>
            </Rectangle>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="{x:Type GridViewColumnHeader}" TargetType="{x:Type GridViewColumnHeader}">
    <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Setter Property="Control.Background" Value="{DynamicResource LightBrush}" />
    <Setter Property="Control.Padding" Value="2,0,2,0" />
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Main" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.65" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="PressedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Main" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Grid Margin="0,1,0,1">
            <Grid>
              <Border Name="Main" BorderThickness="{TemplateBinding Control.BorderThickness}" Padding="{TemplateBinding Control.Padding}" Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="0,0,0,0" />
              <Border Name="HoverBorder" BorderThickness="{TemplateBinding Control.BorderThickness}" Padding="{TemplateBinding Control.Padding}" Background="{DynamicResource HoverBrush}" CornerRadius="0,0,0,0" Opacity="0" BorderBrush="{x:Null}" />
              <Border BorderThickness="{TemplateBinding Control.BorderThickness}" Padding="{TemplateBinding Control.Padding}">
                <Border.BorderBrush>
                  <SolidColorBrush Color="{DynamicResource WhiteColor}" />
                </Border.BorderBrush>
                <ContentPresenter VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" RecognizesAccessKey="True" Margin="2,2,2,2" />
              </Border>
            </Grid>
            <Canvas>
              <Thumb Name="PART_HeaderGripper" Style="{StaticResource GridViewColumnHeaderGripper}" HorizontalAlignment="Stretch" />
            </Canvas>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Trigger.ExitActions>
                <BeginStoryboard Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
              </Trigger.ExitActions>
              <Trigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource HoverOn}" />
              </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="True">
              <Trigger.ExitActions>
                <BeginStoryboard Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}" />
              </Trigger.ExitActions>
              <Trigger.EnterActions>
                <BeginStoryboard Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}" />
              </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="FrameworkElement.Height" Value="Auto">
              <Setter Property="FrameworkElement.MinHeight" Value="20" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground" />
            </Trigger>
            <Trigger Property="GridViewColumnHeader.Role" Value="Padding">
              <Setter TargetName="PART_HeaderGripper" Property="UIElement.Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="GridViewColumnHeader.Role" Value="Floating">
              <Setter TargetName="PART_HeaderGripper" Property="UIElement.Visibility" Value="Collapsed" />
              <Setter Property="Control.Background" Value="#FFFFFF00" />
              <Setter Value="{DynamicResource MouseOverBrush}" Property="Control.Foreground" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ButtonFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle SnapsToDevicePixels="True" Margin="2" Stroke="#FF000000" StrokeDashArray="1 2" StrokeThickness="1" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#F3F3F3" Offset="0" />
    <GradientStop Color="#EBEBEB" Offset="0.5" />
    <GradientStop Color="#DDDDDD" Offset="0.5" />
    <GradientStop Color="#CDCDCD" Offset="1" />
  </LinearGradientBrush>
  <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070" />
  <Style x:Key="{x:Type ToggleButton}" TargetType="{x:Type ToggleButton}">
    <Style.Triggers>
      <Trigger Property="UIElement.IsEnabled" Value="False">
        <Setter Property="Control.Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
      </Trigger>
    </Style.Triggers>
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
    <Setter Property="Control.Background" Value="{DynamicResource SelectedBackgroundBrush}" />
    <Setter Property="Control.BorderBrush" Value="{DynamicResource NormalBrush}" />
    <Setter Property="Control.BorderThickness" Value="2,2,2,2" />
    <Setter Property="Control.Foreground" Value="{DynamicResource TextBrush}" />
    <Setter Property="Control.HorizontalContentAlignment" Value="Center" />
    <Setter Property="Control.VerticalContentAlignment" Value="Center" />
    <Setter Property="Control.Padding" Value="1" />
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="HoverOn">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="Opacity">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HoverOff">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BackgroundAnimation" Storyboard.TargetProperty="Opacity">
                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="CheckedOn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="CheckedOff">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Grid>
            <Border Name="Background" Background="{TemplateBinding Control.Background}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="4,4,4,4" Opacity="0.9" />
            <Border Name="CheckedBorder" Opacity="0" Background="{StaticResource NormalBrush}" BorderBrush="{DynamicResource NormalBrush}" BorderThickness="2,2,2,2" CornerRadius="4" />
            <Border Name="BackgroundAnimation" Opacity="0" Background="{StaticResource HoverBrush}" BorderBrush="{TemplateBinding Control.BorderBrush}" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="4" />
            <ContentPresenter HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" RecognizesAccessKey="True" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ButtonBase.IsPressed" Value="True" />
            <Trigger Property="UIElement.IsMouseOver" Value="True">
              <Trigger.ExitActions>
                <BeginStoryboard Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}" />
              </Trigger.ExitActions>
              <Trigger.EnterActions>
                <BeginStoryboard Name="HoverOn_BeginStoryboard" Storyboard="{StaticResource HoverOn}" />
              </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="UIElement.IsKeyboardFocused" Value="True" />
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Trigger.ExitActions>
                <BeginStoryboard Name="CheckedOff_BeginStoryboard" Storyboard="{StaticResource CheckedOff}" />
              </Trigger.ExitActions>
              <Trigger.EnterActions>
                <BeginStoryboard Name="CheckedOn_BeginStoryboard" Storyboard="{StaticResource CheckedOn}" />
              </Trigger.EnterActions>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
              <Setter TargetName="Background" Value="{DynamicResource DisabledBackgroundBrush}" Property="Border.Background" />
              <Setter TargetName="Background" Value="{DynamicResource DisabledBorderBrush}" Property="Border.BorderBrush" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>